// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: PB/proto.proto

package PB

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MSG_ID int32

const (
	MSG_ID_LOGIN           MSG_ID = 0
	MSG_ID_USER_INFO       MSG_ID = 1
	MSG_ID_PLAYER_ONLINE   MSG_ID = 2
	MSG_ID_PLAYER_OFFLINE  MSG_ID = 3
	MSG_ID_ERROR_INFO      MSG_ID = 4
	MSG_ID_SYS_INFO        MSG_ID = 6
	MSG_ID_MOVE_TO         MSG_ID = 10
	MSG_ID_MOVE_DIR        MSG_ID = 11
	MSG_ID_MOVE_STOP       MSG_ID = 12
	MSG_ID_ALLPLAYERDATA   MSG_ID = 20
	MSG_ID_AllLASTCMDCACHE MSG_ID = 30
)

var MSG_ID_name = map[int32]string{
	0:  "LOGIN",
	1:  "USER_INFO",
	2:  "PLAYER_ONLINE",
	3:  "PLAYER_OFFLINE",
	4:  "ERROR_INFO",
	6:  "SYS_INFO",
	10: "MOVE_TO",
	11: "MOVE_DIR",
	12: "MOVE_STOP",
	20: "ALLPLAYERDATA",
	30: "AllLASTCMDCACHE",
}

var MSG_ID_value = map[string]int32{
	"LOGIN":           0,
	"USER_INFO":       1,
	"PLAYER_ONLINE":   2,
	"PLAYER_OFFLINE":  3,
	"ERROR_INFO":      4,
	"SYS_INFO":        6,
	"MOVE_TO":         10,
	"MOVE_DIR":        11,
	"MOVE_STOP":       12,
	"ALLPLAYERDATA":   20,
	"AllLASTCMDCACHE": 30,
}

func (x MSG_ID) String() string {
	return proto.EnumName(MSG_ID_name, int32(x))
}

func (MSG_ID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d4e903d2e8d3f80b, []int{0}
}

// Vector3
type Vec3 struct {
	X                    float32  `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float32  `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z                    float32  `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vec3) Reset()         { *m = Vec3{} }
func (m *Vec3) String() string { return proto.CompactTextString(m) }
func (*Vec3) ProtoMessage()    {}
func (*Vec3) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e903d2e8d3f80b, []int{0}
}
func (m *Vec3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vec3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vec3.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vec3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vec3.Merge(m, src)
}
func (m *Vec3) XXX_Size() int {
	return m.Size()
}
func (m *Vec3) XXX_DiscardUnknown() {
	xxx_messageInfo_Vec3.DiscardUnknown(m)
}

var xxx_messageInfo_Vec3 proto.InternalMessageInfo

func (m *Vec3) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vec3) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Vec3) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

// 登陆 0
type Login struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pwd                  string   `protobuf:"bytes,2,opt,name=pwd,proto3" json:"pwd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Login) Reset()         { *m = Login{} }
func (m *Login) String() string { return proto.CompactTextString(m) }
func (*Login) ProtoMessage()    {}
func (*Login) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e903d2e8d3f80b, []int{1}
}
func (m *Login) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Login) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Login.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Login) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Login.Merge(m, src)
}
func (m *Login) XXX_Size() int {
	return m.Size()
}
func (m *Login) XXX_DiscardUnknown() {
	xxx_messageInfo_Login.DiscardUnknown(m)
}

var xxx_messageInfo_Login proto.InternalMessageInfo

func (m *Login) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Login) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

// 用户信息 1
type UserInfo struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Pos                  *Vec3    `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	MoveState            int32    `protobuf:"varint,5,opt,name=move_state,json=moveState,proto3" json:"move_state,omitempty"`
	Hp                   int32    `protobuf:"varint,6,opt,name=hp,proto3" json:"hp,omitempty"`
	Mp                   int32    `protobuf:"varint,7,opt,name=mp,proto3" json:"mp,omitempty"`
	HpMax                int32    `protobuf:"varint,8,opt,name=hp_max,json=hpMax,proto3" json:"hp_max,omitempty"`
	MpMax                int32    `protobuf:"varint,9,opt,name=mp_max,json=mpMax,proto3" json:"mp_max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e903d2e8d3f80b, []int{2}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UserInfo) GetPos() *Vec3 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *UserInfo) GetMoveState() int32 {
	if m != nil {
		return m.MoveState
	}
	return 0
}

func (m *UserInfo) GetHp() int32 {
	if m != nil {
		return m.Hp
	}
	return 0
}

func (m *UserInfo) GetMp() int32 {
	if m != nil {
		return m.Mp
	}
	return 0
}

func (m *UserInfo) GetHpMax() int32 {
	if m != nil {
		return m.HpMax
	}
	return 0
}

func (m *UserInfo) GetMpMax() int32 {
	if m != nil {
		return m.MpMax
	}
	return 0
}

// 用户上线 2
type PlayerOnline struct {
	Info                 *UserInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Frame                int64     `protobuf:"varint,2,opt,name=frame,proto3" json:"frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PlayerOnline) Reset()         { *m = PlayerOnline{} }
func (m *PlayerOnline) String() string { return proto.CompactTextString(m) }
func (*PlayerOnline) ProtoMessage()    {}
func (*PlayerOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e903d2e8d3f80b, []int{3}
}
func (m *PlayerOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerOnline.Merge(m, src)
}
func (m *PlayerOnline) XXX_Size() int {
	return m.Size()
}
func (m *PlayerOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerOnline.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerOnline proto.InternalMessageInfo

func (m *PlayerOnline) GetInfo() *UserInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *PlayerOnline) GetFrame() int64 {
	if m != nil {
		return m.Frame
	}
	return 0
}

// 用户下线 3
type PlayerOffline struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Frame                int64    `protobuf:"varint,2,opt,name=frame,proto3" json:"frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerOffline) Reset()         { *m = PlayerOffline{} }
func (m *PlayerOffline) String() string { return proto.CompactTextString(m) }
func (*PlayerOffline) ProtoMessage()    {}
func (*PlayerOffline) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e903d2e8d3f80b, []int{4}
}
func (m *PlayerOffline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerOffline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerOffline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerOffline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerOffline.Merge(m, src)
}
func (m *PlayerOffline) XXX_Size() int {
	return m.Size()
}
func (m *PlayerOffline) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerOffline.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerOffline proto.InternalMessageInfo

func (m *PlayerOffline) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PlayerOffline) GetFrame() int64 {
	if m != nil {
		return m.Frame
	}
	return 0
}

// 错误信息 4
type ErrorInfo struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorInfo) Reset()         { *m = ErrorInfo{} }
func (m *ErrorInfo) String() string { return proto.CompactTextString(m) }
func (*ErrorInfo) ProtoMessage()    {}
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e903d2e8d3f80b, []int{5}
}
func (m *ErrorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorInfo.Merge(m, src)
}
func (m *ErrorInfo) XXX_Size() int {
	return m.Size()
}
func (m *ErrorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorInfo proto.InternalMessageInfo

func (m *ErrorInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ErrorInfo) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 系统信息 6
type SysInfo struct {
	ServerId             int32    `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ServerRuntime        int64    `protobuf:"varint,2,opt,name=server_runtime,json=serverRuntime,proto3" json:"server_runtime,omitempty"`
	CurFrame             int64    `protobuf:"varint,3,opt,name=cur_frame,json=curFrame,proto3" json:"cur_frame,omitempty"`
	PlayerCount          int32    `protobuf:"varint,4,opt,name=player_count,json=playerCount,proto3" json:"player_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SysInfo) Reset()         { *m = SysInfo{} }
func (m *SysInfo) String() string { return proto.CompactTextString(m) }
func (*SysInfo) ProtoMessage()    {}
func (*SysInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e903d2e8d3f80b, []int{6}
}
func (m *SysInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SysInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SysInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysInfo.Merge(m, src)
}
func (m *SysInfo) XXX_Size() int {
	return m.Size()
}
func (m *SysInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SysInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SysInfo proto.InternalMessageInfo

func (m *SysInfo) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *SysInfo) GetServerRuntime() int64 {
	if m != nil {
		return m.ServerRuntime
	}
	return 0
}

func (m *SysInfo) GetCurFrame() int64 {
	if m != nil {
		return m.CurFrame
	}
	return 0
}

func (m *SysInfo) GetPlayerCount() int32 {
	if m != nil {
		return m.PlayerCount
	}
	return 0
}

// 移动 10
type MoveTo struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Frompos              *Vec3    `protobuf:"bytes,2,opt,name=frompos,proto3" json:"frompos,omitempty"`
	Topos                *Vec3    `protobuf:"bytes,3,opt,name=topos,proto3" json:"topos,omitempty"`
	Speed                float32  `protobuf:"fixed32,4,opt,name=speed,proto3" json:"speed,omitempty"`
	Frame                int64    `protobuf:"varint,5,opt,name=frame,proto3" json:"frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveTo) Reset()         { *m = MoveTo{} }
func (m *MoveTo) String() string { return proto.CompactTextString(m) }
func (*MoveTo) ProtoMessage()    {}
func (*MoveTo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e903d2e8d3f80b, []int{7}
}
func (m *MoveTo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoveTo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoveTo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoveTo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveTo.Merge(m, src)
}
func (m *MoveTo) XXX_Size() int {
	return m.Size()
}
func (m *MoveTo) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveTo.DiscardUnknown(m)
}

var xxx_messageInfo_MoveTo proto.InternalMessageInfo

func (m *MoveTo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MoveTo) GetFrompos() *Vec3 {
	if m != nil {
		return m.Frompos
	}
	return nil
}

func (m *MoveTo) GetTopos() *Vec3 {
	if m != nil {
		return m.Topos
	}
	return nil
}

func (m *MoveTo) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *MoveTo) GetFrame() int64 {
	if m != nil {
		return m.Frame
	}
	return 0
}

// 移动 11
type MoveDir struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Frompos              *Vec3    `protobuf:"bytes,2,opt,name=frompos,proto3" json:"frompos,omitempty"`
	Speed                float32  `protobuf:"fixed32,3,opt,name=speed,proto3" json:"speed,omitempty"`
	Frame                int64    `protobuf:"varint,4,opt,name=frame,proto3" json:"frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveDir) Reset()         { *m = MoveDir{} }
func (m *MoveDir) String() string { return proto.CompactTextString(m) }
func (*MoveDir) ProtoMessage()    {}
func (*MoveDir) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e903d2e8d3f80b, []int{8}
}
func (m *MoveDir) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoveDir) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoveDir.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoveDir) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveDir.Merge(m, src)
}
func (m *MoveDir) XXX_Size() int {
	return m.Size()
}
func (m *MoveDir) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveDir.DiscardUnknown(m)
}

var xxx_messageInfo_MoveDir proto.InternalMessageInfo

func (m *MoveDir) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MoveDir) GetFrompos() *Vec3 {
	if m != nil {
		return m.Frompos
	}
	return nil
}

func (m *MoveDir) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *MoveDir) GetFrame() int64 {
	if m != nil {
		return m.Frame
	}
	return 0
}

// 停止移动 12
type MoveStop struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pos                  *Vec3    `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Frame                int64    `protobuf:"varint,3,opt,name=frame,proto3" json:"frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoveStop) Reset()         { *m = MoveStop{} }
func (m *MoveStop) String() string { return proto.CompactTextString(m) }
func (*MoveStop) ProtoMessage()    {}
func (*MoveStop) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e903d2e8d3f80b, []int{9}
}
func (m *MoveStop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MoveStop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MoveStop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MoveStop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveStop.Merge(m, src)
}
func (m *MoveStop) XXX_Size() int {
	return m.Size()
}
func (m *MoveStop) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveStop.DiscardUnknown(m)
}

var xxx_messageInfo_MoveStop proto.InternalMessageInfo

func (m *MoveStop) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MoveStop) GetPos() *Vec3 {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *MoveStop) GetFrame() int64 {
	if m != nil {
		return m.Frame
	}
	return 0
}

// 玩家数据 20
type AllPlayerData struct {
	Players              []*UserInfo `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	Frame                int64       `protobuf:"varint,2,opt,name=frame,proto3" json:"frame,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AllPlayerData) Reset()         { *m = AllPlayerData{} }
func (m *AllPlayerData) String() string { return proto.CompactTextString(m) }
func (*AllPlayerData) ProtoMessage()    {}
func (*AllPlayerData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e903d2e8d3f80b, []int{10}
}
func (m *AllPlayerData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllPlayerData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllPlayerData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllPlayerData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPlayerData.Merge(m, src)
}
func (m *AllPlayerData) XXX_Size() int {
	return m.Size()
}
func (m *AllPlayerData) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPlayerData.DiscardUnknown(m)
}

var xxx_messageInfo_AllPlayerData proto.InternalMessageInfo

func (m *AllPlayerData) GetPlayers() []*UserInfo {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *AllPlayerData) GetFrame() int64 {
	if m != nil {
		return m.Frame
	}
	return 0
}

//玩家操作缓存
type LastCmdCache struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cache                []byte   `protobuf:"bytes,2,opt,name=cache,proto3" json:"cache,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LastCmdCache) Reset()         { *m = LastCmdCache{} }
func (m *LastCmdCache) String() string { return proto.CompactTextString(m) }
func (*LastCmdCache) ProtoMessage()    {}
func (*LastCmdCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e903d2e8d3f80b, []int{11}
}
func (m *LastCmdCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastCmdCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastCmdCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastCmdCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastCmdCache.Merge(m, src)
}
func (m *LastCmdCache) XXX_Size() int {
	return m.Size()
}
func (m *LastCmdCache) XXX_DiscardUnknown() {
	xxx_messageInfo_LastCmdCache.DiscardUnknown(m)
}

var xxx_messageInfo_LastCmdCache proto.InternalMessageInfo

func (m *LastCmdCache) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LastCmdCache) GetCache() []byte {
	if m != nil {
		return m.Cache
	}
	return nil
}

// 全部操作缓存 30
type AllLastCmdCache struct {
	Caches               []*LastCmdCache `protobuf:"bytes,1,rep,name=caches,proto3" json:"caches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AllLastCmdCache) Reset()         { *m = AllLastCmdCache{} }
func (m *AllLastCmdCache) String() string { return proto.CompactTextString(m) }
func (*AllLastCmdCache) ProtoMessage()    {}
func (*AllLastCmdCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4e903d2e8d3f80b, []int{12}
}
func (m *AllLastCmdCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllLastCmdCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllLastCmdCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllLastCmdCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllLastCmdCache.Merge(m, src)
}
func (m *AllLastCmdCache) XXX_Size() int {
	return m.Size()
}
func (m *AllLastCmdCache) XXX_DiscardUnknown() {
	xxx_messageInfo_AllLastCmdCache.DiscardUnknown(m)
}

var xxx_messageInfo_AllLastCmdCache proto.InternalMessageInfo

func (m *AllLastCmdCache) GetCaches() []*LastCmdCache {
	if m != nil {
		return m.Caches
	}
	return nil
}

func init() {
	proto.RegisterEnum("PB.MSG_ID", MSG_ID_name, MSG_ID_value)
	proto.RegisterType((*Vec3)(nil), "PB.Vec3")
	proto.RegisterType((*Login)(nil), "PB.Login")
	proto.RegisterType((*UserInfo)(nil), "PB.UserInfo")
	proto.RegisterType((*PlayerOnline)(nil), "PB.PlayerOnline")
	proto.RegisterType((*PlayerOffline)(nil), "PB.PlayerOffline")
	proto.RegisterType((*ErrorInfo)(nil), "PB.ErrorInfo")
	proto.RegisterType((*SysInfo)(nil), "PB.SysInfo")
	proto.RegisterType((*MoveTo)(nil), "PB.MoveTo")
	proto.RegisterType((*MoveDir)(nil), "PB.MoveDir")
	proto.RegisterType((*MoveStop)(nil), "PB.MoveStop")
	proto.RegisterType((*AllPlayerData)(nil), "PB.AllPlayerData")
	proto.RegisterType((*LastCmdCache)(nil), "PB.LastCmdCache")
	proto.RegisterType((*AllLastCmdCache)(nil), "PB.AllLastCmdCache")
}

func init() { proto.RegisterFile("PB/proto.proto", fileDescriptor_d4e903d2e8d3f80b) }

var fileDescriptor_d4e903d2e8d3f80b = []byte{
	// 707 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x8e, 0xd2, 0x5a,
	0x14, 0x3e, 0x6d, 0x29, 0xd0, 0x45, 0xe1, 0xf4, 0xec, 0x33, 0x27, 0x69, 0x8e, 0x91, 0x60, 0x13,
	0xcd, 0x68, 0xe2, 0x68, 0x66, 0xf4, 0xca, 0xab, 0x02, 0x65, 0x6c, 0x52, 0x68, 0xb3, 0xcb, 0x4c,
	0x32, 0xde, 0x34, 0x15, 0xca, 0xd0, 0x84, 0xfe, 0xa4, 0x2d, 0x23, 0xcc, 0x13, 0x78, 0xe3, 0x03,
	0xf9, 0x06, 0x26, 0xde, 0xf8, 0x08, 0x66, 0x9e, 0xc4, 0xec, 0xbd, 0x29, 0xe2, 0x80, 0x37, 0xde,
	0x90, 0x7e, 0xdf, 0xfa, 0xf9, 0xd6, 0x5a, 0xfb, 0x0b, 0xd0, 0x72, 0xba, 0x2f, 0xd2, 0x2c, 0x29,
	0x92, 0x13, 0xfa, 0x8b, 0x78, 0xa7, 0xab, 0xbd, 0x84, 0xca, 0x65, 0x30, 0x39, 0x43, 0x32, 0x70,
	0x2b, 0x95, 0xeb, 0x70, 0xc7, 0x3c, 0xe6, 0x56, 0x04, 0xad, 0x55, 0x9e, 0xa1, 0x35, 0x41, 0xb7,
	0xaa, 0xc0, 0xd0, 0xad, 0xf6, 0x14, 0x44, 0x2b, 0xb9, 0x0e, 0x63, 0xd4, 0x02, 0x3e, 0x9c, 0xd2,
	0x1a, 0x11, 0xf3, 0xe1, 0x14, 0x29, 0x20, 0xa4, 0x1f, 0xa6, 0xb4, 0x4c, 0xc2, 0xe4, 0x53, 0xfb,
	0xca, 0x41, 0xfd, 0x22, 0x0f, 0x32, 0x33, 0x9e, 0x25, 0x7b, 0xe9, 0x08, 0x2a, 0xb1, 0x1f, 0x05,
	0x9b, 0x7c, 0xfa, 0x4d, 0xb8, 0x62, 0x9d, 0x06, 0x54, 0x4c, 0xc4, 0xf4, 0x1b, 0xfd, 0x0f, 0x42,
	0x9a, 0xe4, 0x6a, 0xa5, 0xc3, 0x1d, 0x37, 0x4e, 0xeb, 0x27, 0x4e, 0xf7, 0x84, 0x0c, 0x8c, 0x09,
	0x89, 0x1e, 0x02, 0x44, 0xc9, 0x4d, 0xe0, 0xe5, 0x85, 0x5f, 0x04, 0xaa, 0x48, 0xab, 0x24, 0xc2,
	0xb8, 0x84, 0x20, 0x92, 0xf3, 0x54, 0xad, 0x32, 0xc9, 0x79, 0x4a, 0x70, 0x94, 0xaa, 0x35, 0x86,
	0xa3, 0x14, 0xfd, 0x07, 0xd5, 0x79, 0xea, 0x45, 0xfe, 0x4a, 0xad, 0x53, 0x4e, 0x9c, 0xa7, 0x43,
	0x7f, 0x45, 0xe8, 0x88, 0xd1, 0x12, 0xa3, 0x23, 0x42, 0x6b, 0x03, 0x90, 0x9d, 0x85, 0xbf, 0x0e,
	0x32, 0x3b, 0x5e, 0x84, 0x71, 0x80, 0x3a, 0x50, 0x09, 0xe3, 0x59, 0x42, 0x57, 0x6a, 0x9c, 0xca,
	0x64, 0xb2, 0x72, 0x59, 0x4c, 0x23, 0xe8, 0x08, 0xc4, 0x59, 0x56, 0xee, 0x28, 0x60, 0x06, 0xb4,
	0xd7, 0xd0, 0xdc, 0xf4, 0x99, 0xcd, 0x68, 0xa3, 0xfb, 0x97, 0x39, 0x5c, 0xf6, 0x1c, 0x24, 0x23,
	0xcb, 0x92, 0xc3, 0xc7, 0x54, 0x40, 0x88, 0xf2, 0xeb, 0xf2, 0xf6, 0x51, 0x7e, 0xad, 0x7d, 0xe2,
	0xa0, 0xe6, 0xae, 0x73, 0x9a, 0xfd, 0x00, 0xa4, 0x3c, 0xc8, 0x6e, 0x82, 0xcc, 0xdb, 0x16, 0xd5,
	0x19, 0x61, 0x4e, 0xd1, 0x63, 0x68, 0x6d, 0x82, 0xd9, 0x32, 0x2e, 0xc2, 0xad, 0x6c, 0x93, 0xb1,
	0x98, 0x91, 0xa4, 0xc7, 0x64, 0x99, 0x79, 0x6c, 0x30, 0x81, 0x66, 0xd4, 0x27, 0xcb, 0x6c, 0x40,
	0x30, 0x7a, 0x04, 0x72, 0x4a, 0x57, 0xf2, 0x26, 0xc9, 0x32, 0x2e, 0xe8, 0x63, 0x89, 0xb8, 0xc1,
	0xb8, 0x1e, 0xa1, 0xb4, 0x8f, 0x1c, 0x54, 0x87, 0xc9, 0x4d, 0x30, 0xde, 0x1f, 0x5e, 0x83, 0xda,
	0x2c, 0x4b, 0x22, 0xf2, 0xca, 0xfc, 0xbd, 0x57, 0x2e, 0x03, 0xa8, 0x0d, 0x62, 0x91, 0x90, 0x0c,
	0xe1, 0x5e, 0x06, 0xa3, 0xc9, 0xcd, 0xf2, 0x34, 0x08, 0xa6, 0x54, 0x9a, 0xc7, 0x0c, 0xfc, 0xbc,
	0xa4, 0xb8, 0x7b, 0xc9, 0x10, 0x6a, 0x64, 0x92, 0x7e, 0x98, 0xfd, 0xd1, 0x28, 0x5b, 0x29, 0xe1,
	0xa0, 0x54, 0x65, 0x57, 0xca, 0x82, 0xfa, 0x90, 0xda, 0x31, 0x49, 0xf7, 0xb4, 0x36, 0xc6, 0xe6,
	0x0f, 0x19, 0x7b, 0xdb, 0x4d, 0xd8, 0xed, 0x36, 0x84, 0xa6, 0xbe, 0x58, 0x30, 0xf3, 0xf4, 0xfd,
	0xc2, 0x47, 0x4f, 0xa0, 0xc6, 0x6e, 0x9c, 0xab, 0x5c, 0x47, 0xd8, 0x73, 0x61, 0x19, 0xfc, 0x8d,
	0xa3, 0x5e, 0x81, 0x6c, 0xf9, 0x79, 0xd1, 0x8b, 0xa6, 0x3d, 0x7f, 0x32, 0x3f, 0xe8, 0xc3, 0x09,
	0x09, 0xd0, 0x2a, 0x19, 0x33, 0xa0, 0xbd, 0x81, 0xbf, 0xf5, 0xc5, 0xe2, 0x97, 0xc2, 0x63, 0xa8,
	0xd2, 0x58, 0x39, 0x85, 0x42, 0xa6, 0xd8, 0xcd, 0xc0, 0x9b, 0xf8, 0xb3, 0xcf, 0xc4, 0x05, 0xee,
	0xb9, 0x67, 0xf6, 0x91, 0x04, 0xa2, 0x65, 0x9f, 0x9b, 0x23, 0xe5, 0x2f, 0xd4, 0x04, 0xe9, 0xc2,
	0x35, 0xb0, 0x67, 0x8e, 0x06, 0xb6, 0xc2, 0xa1, 0x7f, 0xa0, 0xe9, 0x58, 0xfa, 0x95, 0x81, 0x3d,
	0x7b, 0x64, 0x99, 0x23, 0x43, 0xe1, 0x11, 0x82, 0x56, 0x49, 0x0d, 0x06, 0x94, 0x13, 0x50, 0x0b,
	0xc0, 0xc0, 0xd8, 0xde, 0x94, 0x55, 0x90, 0x0c, 0x75, 0xf7, 0xca, 0x65, 0xa8, 0x8a, 0x1a, 0x50,
	0x1b, 0xda, 0x97, 0x86, 0x37, 0xb6, 0x15, 0x20, 0x21, 0x0a, 0xfa, 0x26, 0x56, 0x1a, 0x44, 0x8e,
	0x22, 0x77, 0x6c, 0x3b, 0x8a, 0x4c, 0xe4, 0x74, 0xcb, 0x62, 0xed, 0xfb, 0xfa, 0x58, 0x57, 0x8e,
	0xd0, 0xbf, 0x6c, 0x47, 0xdd, 0x1d, 0xf7, 0x86, 0xfd, 0x9e, 0xde, 0x7b, 0x6b, 0x28, 0xed, 0xae,
	0xf2, 0xe5, 0xae, 0xcd, 0x7d, 0xbb, 0x6b, 0x73, 0xdf, 0xef, 0xda, 0xdc, 0x3b, 0xde, 0xe9, 0xbe,
	0xaf, 0xd2, 0xff, 0xd1, 0xb3, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xdd, 0xca, 0x1e, 0x59,
	0x05, 0x00, 0x00,
}

func (m *Vec3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vec3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vec3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Z != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Z))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Y != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Y))))
		i--
		dAtA[i] = 0x15
	}
	if m.X != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.X))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *Login) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Login) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Login) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pwd) > 0 {
		i -= len(m.Pwd)
		copy(dAtA[i:], m.Pwd)
		i = encodeVarintProto(dAtA, i, uint64(len(m.Pwd)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MpMax != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.MpMax))
		i--
		dAtA[i] = 0x48
	}
	if m.HpMax != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.HpMax))
		i--
		dAtA[i] = 0x40
	}
	if m.Mp != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Mp))
		i--
		dAtA[i] = 0x38
	}
	if m.Hp != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Hp))
		i--
		dAtA[i] = 0x30
	}
	if m.MoveState != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.MoveState))
		i--
		dAtA[i] = 0x28
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProto(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintProto(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Frame != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Frame))
		i--
		dAtA[i] = 0x10
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProto(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlayerOffline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerOffline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerOffline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Frame != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Frame))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ErrorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintProto(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SysInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SysInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerCount != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.PlayerCount))
		i--
		dAtA[i] = 0x20
	}
	if m.CurFrame != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.CurFrame))
		i--
		dAtA[i] = 0x18
	}
	if m.ServerRuntime != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.ServerRuntime))
		i--
		dAtA[i] = 0x10
	}
	if m.ServerId != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MoveTo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveTo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoveTo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Frame != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Frame))
		i--
		dAtA[i] = 0x28
	}
	if m.Speed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Speed))))
		i--
		dAtA[i] = 0x25
	}
	if m.Topos != nil {
		{
			size, err := m.Topos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProto(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Frompos != nil {
		{
			size, err := m.Frompos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProto(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MoveDir) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveDir) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoveDir) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Frame != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Frame))
		i--
		dAtA[i] = 0x20
	}
	if m.Speed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Speed))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Frompos != nil {
		{
			size, err := m.Frompos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProto(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MoveStop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveStop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MoveStop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Frame != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Frame))
		i--
		dAtA[i] = 0x18
	}
	if m.Pos != nil {
		{
			size, err := m.Pos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProto(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllPlayerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllPlayerData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllPlayerData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Frame != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Frame))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProto(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LastCmdCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastCmdCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastCmdCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cache) > 0 {
		i -= len(m.Cache)
		copy(dAtA[i:], m.Cache)
		i = encodeVarintProto(dAtA, i, uint64(len(m.Cache)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintProto(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllLastCmdCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllLastCmdCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllLastCmdCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Caches) > 0 {
		for iNdEx := len(m.Caches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Caches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProto(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintProto(dAtA []byte, offset int, v uint64) int {
	offset -= sovProto(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vec3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Y != 0 {
		n += 5
	}
	if m.Z != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Login) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProto(uint64(m.Id))
	}
	l = len(m.Pwd)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProto(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovProto(uint64(m.Type))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovProto(uint64(l))
	}
	if m.MoveState != 0 {
		n += 1 + sovProto(uint64(m.MoveState))
	}
	if m.Hp != 0 {
		n += 1 + sovProto(uint64(m.Hp))
	}
	if m.Mp != 0 {
		n += 1 + sovProto(uint64(m.Mp))
	}
	if m.HpMax != 0 {
		n += 1 + sovProto(uint64(m.HpMax))
	}
	if m.MpMax != 0 {
		n += 1 + sovProto(uint64(m.MpMax))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Frame != 0 {
		n += 1 + sovProto(uint64(m.Frame))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerOffline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProto(uint64(m.Id))
	}
	if m.Frame != 0 {
		n += 1 + sovProto(uint64(m.Frame))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ErrorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProto(uint64(m.Id))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SysInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerId != 0 {
		n += 1 + sovProto(uint64(m.ServerId))
	}
	if m.ServerRuntime != 0 {
		n += 1 + sovProto(uint64(m.ServerRuntime))
	}
	if m.CurFrame != 0 {
		n += 1 + sovProto(uint64(m.CurFrame))
	}
	if m.PlayerCount != 0 {
		n += 1 + sovProto(uint64(m.PlayerCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MoveTo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProto(uint64(m.Id))
	}
	if m.Frompos != nil {
		l = m.Frompos.Size()
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Topos != nil {
		l = m.Topos.Size()
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Speed != 0 {
		n += 5
	}
	if m.Frame != 0 {
		n += 1 + sovProto(uint64(m.Frame))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MoveDir) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProto(uint64(m.Id))
	}
	if m.Frompos != nil {
		l = m.Frompos.Size()
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Speed != 0 {
		n += 5
	}
	if m.Frame != 0 {
		n += 1 + sovProto(uint64(m.Frame))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MoveStop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProto(uint64(m.Id))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Frame != 0 {
		n += 1 + sovProto(uint64(m.Frame))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllPlayerData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovProto(uint64(l))
		}
	}
	if m.Frame != 0 {
		n += 1 + sovProto(uint64(m.Frame))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LastCmdCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProto(uint64(m.Id))
	}
	l = len(m.Cache)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AllLastCmdCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Caches) > 0 {
		for _, e := range m.Caches {
			l = e.Size()
			n += 1 + l + sovProto(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProto(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProto(x uint64) (n int) {
	return sovProto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vec3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vec3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vec3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Y = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Z = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Login) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Login: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Login: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vec3{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveState", wireType)
			}
			m.MoveState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MoveState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hp", wireType)
			}
			m.Hp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mp", wireType)
			}
			m.Mp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HpMax", wireType)
			}
			m.HpMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HpMax |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MpMax", wireType)
			}
			m.MpMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MpMax |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &UserInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			m.Frame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerOffline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerOffline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerOffline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			m.Frame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerRuntime", wireType)
			}
			m.ServerRuntime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerRuntime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurFrame", wireType)
			}
			m.CurFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurFrame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerCount", wireType)
			}
			m.PlayerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveTo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveTo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveTo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frompos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Frompos == nil {
				m.Frompos = &Vec3{}
			}
			if err := m.Frompos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topos == nil {
				m.Topos = &Vec3{}
			}
			if err := m.Topos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Speed = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			m.Frame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveDir) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveDir: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveDir: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frompos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Frompos == nil {
				m.Frompos = &Vec3{}
			}
			if err := m.Frompos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Speed = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			m.Frame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveStop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveStop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveStop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Vec3{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			m.Frame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllPlayerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllPlayerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllPlayerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &UserInfo{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			m.Frame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frame |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastCmdCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastCmdCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastCmdCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cache", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cache = append(m.Cache[:0], dAtA[iNdEx:postIndex]...)
			if m.Cache == nil {
				m.Cache = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllLastCmdCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllLastCmdCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllLastCmdCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caches = append(m.Caches, &LastCmdCache{})
			if err := m.Caches[len(m.Caches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProto
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProto
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProto
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProto        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProto          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProto = fmt.Errorf("proto: unexpected end of group")
)
